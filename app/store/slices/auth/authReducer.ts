import { createSlice } from "@reduxjs/toolkit"
import {
  resendOtpCode,
  signinService,
  signupService,
  updateUserService,
  verifyEmailService,
} from "./authService"
import { AuthI } from "./types"

const initialState: AuthI = {
  loading: false,
  user: {
    token: "",
    user: {
      displayPicture: "" || null,
      firstname: "",
      lastname: "",
      email: "",
      isEmailVerified: false,
      _id: "",
      createdAt: "",
      updatedAt: "",
    },
  },
  error: null,
}

export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`

    // setTodos: (state, action: PayloadAction<TodosI[]>) => {
    //   state.data = action.payload;
    // },
    logoutUser: (state) => {
      state.loading = false
      state.user = null
      state.error = null
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signupService.pending, (state) => {
        state.loading = true
      })
      .addCase(signupService.fulfilled, (state, action) => {
        state.loading = false
        state.user = action.payload.result
      })
      .addCase(signupService.rejected, (state, action) => {
        state.loading = false
        state.error = action.payload
      })

      // Add extra reducers for signinService
      .addCase(signinService.pending, (state) => {
        state.loading = true
      })
      .addCase(signinService.fulfilled, (state, action) => {
        console.log("ok")
        console.log("action.payload.result === ", action.payload.result)
        state.loading = false
        state.user = action.payload.result
      })
      .addCase(signinService.rejected, (state, action) => {
        state.loading = false
        state.error = action.payload
      })

      //verifyEmailService
      .addCase(verifyEmailService.pending, (state) => {
        state.loading = true
      })
      .addCase(verifyEmailService.fulfilled, (state, action) => {
        state.loading = false
        state.user = action.payload.result
      })
      .addCase(verifyEmailService.rejected, (state, action) => {
        state.loading = false
        state.error = action.payload
      })

      //verifyEmailService
      .addCase(updateUserService.pending, (state) => {
        state.loading = true
      })
      .addCase(updateUserService.fulfilled, (state, action) => {
        state.loading = false
        state.user = action.payload.result
      })
      .addCase(updateUserService.rejected, (state, action) => {
        state.loading = false
        state.error = action.payload
      })

      .addCase(resendOtpCode.pending, (state) => {
        state.loading = true
      })
      .addCase(resendOtpCode.fulfilled, (state, action) => {
        state.loading = false
        // state.user = action.payload.result
      })
      .addCase(resendOtpCode.rejected, (state, action) => {
        state.loading = false
        state.error = action.payload
      })
  },
})

export const { logoutUser } = authSlice.actions

export default authSlice.reducer
